
Given the root of a binary tree, return the sum of every tree node's tilt.

The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if there the node does not have a right child.

 

Example 1:


Input: root = [1,2,3]
Output: 1
Explanation: 
Tilt of node 2 : |0-0| = 0 (no children)
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)
Sum of every tilt : 0 + 0 + 1 = 1

Solution :
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans;
    public int findTilt(TreeNode root) {
       ans=0;
        rec(root);
        return ans;
        
    }
    public int rec(TreeNode root)
    {
        if(root==null)
        {
            return 0;
        }
        else
        {
            int left = rec(root.left);
            int right = rec(root.right);
            ans+=Math.abs(left-right);
            if(root.left!=null && root.right!=null)
            return root.val+left+right;
            else if(root.left!=null && root.right==null)
                return root.val+left;
            else if(root.left==null && root.right!=null)
                return root.val+right;
            else
                return root.val;
        }
        
    }
}
