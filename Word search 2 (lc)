class Solution {
     
    public List<String> findWords(char[][] board, String[] words) {
    
        List<String> ans = new ArrayList<>();

        
         
        lab1:
        for(int k=0;k<words.length;k++)
        {
           boolean[][] visited = new boolean[board.length][board[0].length]; 
            
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                
                
                if(board[i][j]==words[k].charAt(0) &&  wordsearch(board,visited,i,j,0,words[k]))
                {
                   ans.add(words[k]);
                    continue lab1;
                  
                   
                    
                }   
            }
        
        }
        }
        
        
    
        
        return ans;
    }
    public boolean wordsearch(char[][] board,boolean[][] visited,int i,int j,int index,String s)
    {
        if(index==s.length())
            return true;
        
        if(i<0 || i>= board.length || j<0 || j>= board[0].length || board[i][j]!=s.charAt(index) || visited[i][j] )
        {
            return false;
        }
        visited[i][j]=true;
        if(wordsearch(board,visited,i+1,j,index+1,s) ||
           wordsearch(board,visited,i-1,j,index+1,s) ||
           wordsearch(board,visited,i,j+1,index+1,s) ||
           wordsearch(board,visited,i,j-1,index+1,s)
          )
        {
            return true;
        }
        visited[i][j]=false;
        return false;
        
    }
    
    
}
